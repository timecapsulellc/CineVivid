#!/usr/bin/env python3
"""
Production Setup Script for CineVivid
Automates production deployment and configuration
"""
import os
import sys
import subprocess
import logging
import argparse
from pathlib import Path
from typing import List, Dict, Any
import shutil
import json

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class ProductionSetup:
    """Production setup manager"""
    
    def __init__(self, project_dir: str = "."):
        self.project_dir = Path(project_dir)
        self.env_file = self.project_dir / ".env"
        self.docker_compose_prod = self.project_dir / "docker-compose.prod.yml"
        
    def check_prerequisites(self) -> bool:
        """Check system prerequisites"""
        logger.info("Checking prerequisites...")
        
        requirements = {
            "docker": ["docker", "--version"],
            "docker-compose": ["docker-compose", "--version"],
            "python": ["python", "--version"],
            "node": ["node", "--version"],
            "npm": ["npm", "--version"]
        }
        
        missing = []
        for name, command in requirements.items():
            try:
                result = subprocess.run(command, capture_output=True, text=True)
                if result.returncode == 0:
                    logger.info(f"✓ {name}: {result.stdout.strip()}")
                else:
                    missing.append(name)
            except FileNotFoundError:
                missing.append(name)
        
        if missing:
            logger.error(f"Missing prerequisites: {', '.join(missing)}")
            return False
        
        # Check GPU (optional)
        try:
            result = subprocess.run(["nvidia-smi"], capture_output=True)
            if result.returncode == 0:
                logger.info("✓ NVIDIA GPU detected")
            else:
                logger.warning("! No NVIDIA GPU detected - will use CPU mode")
        except FileNotFoundError:
            logger.warning("! nvidia-smi not found - ensure NVIDIA drivers are installed")
        
        return True
    
    def setup_environment(self, config: Dict[str, str]):
        """Setup environment configuration"""
        logger.info("Setting up environment configuration...")
        
        # Required environment variables
        required_vars = [
            "HUGGINGFACE_TOKEN",
            "ELEVENLABS_API_KEY",
            "SECRET_KEY",
            "DATABASE_URL"
        ]
        
        env_content = []
        env_content.append("# CineVivid Production Configuration")
        env_content.append("# Generated by setup_production.py")
        env_content.append("")
        
        # Core settings
        env_content.extend([
            "# Core Application",
            "ENVIRONMENT=production",
            "DEBUG=false",
            "LOG_LEVEL=INFO",
            "LOG_FORMAT=json",
            ""
        ])
        
        # Add provided configuration
        for key, value in config.items():
            env_content.append(f"{key}={value}")
        
        # Write .env file
        try:
            with open(self.env_file, 'w') as f:
                f.write('\n'.join(env_content))
            
            logger.info(f"Environment configuration saved to {self.env_file}")
            
            # Check for missing required vars
            missing_required = []
            for var in required_vars:
                if var not in config or not config[var]:
                    missing_required.append(var)
            
            if missing_required:
                logger.warning(f"Missing required environment variables: {', '.join(missing_required)}")
                logger.warning("Please update .env file with actual values")
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"Failed to write environment file: {e}")
            return False
    
    def setup_database(self):
        """Setup production database"""
        logger.info("Setting up database...")
        
        try:
            # Import here to ensure environment is loaded
            from src.backend.db.database import init_database, create_tables
            
            # Create tables
            if create_tables():
                logger.info("✓ Database tables created")
            else:
                logger.error("Failed to create database tables")
                return False
            
            # Initialize with default data
            if init_database():
                logger.info("✓ Database initialized with default data")
            else:
                logger.error("Failed to initialize database")
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"Database setup failed: {e}")
            return False
    
    def build_frontend(self):
        """Build frontend for production"""
        logger.info("Building frontend...")
        
        frontend_dir = self.project_dir / "src/frontend"
        
        if not frontend_dir.exists():
            logger.error("Frontend directory not found")
            return False
        
        try:
            # Install dependencies
            logger.info("Installing frontend dependencies...")
            result = subprocess.run(["npm", "install"], cwd=frontend_dir, capture_output=True, text=True)
            if result.returncode != 0:
                logger.error(f"npm install failed: {result.stderr}")
                return False
            
            # Build production version
            logger.info("Building production frontend...")
            result = subprocess.run(["npm", "run", "build"], cwd=frontend_dir, capture_output=True, text=True)
            if result.returncode != 0:
                logger.error(f"npm build failed: {result.stderr}")
                return False
            
            logger.info("✓ Frontend built successfully")
            return True
            
        except Exception as e:
            logger.error(f"Frontend build failed: {e}")
            return False
    
    def setup_docker_production(self):
        """Setup Docker production configuration"""
        logger.info("Setting up Docker production configuration...")
        
        # Create production docker-compose if it doesn't exist
        if not self.docker_compose_prod.exists():
            prod_config = """version: '3.8'

services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/ssl/certs
    depends_on:
      - backend
    restart: unless-stopped

  postgres:
    image: postgres:13
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  backend:
    build: .
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres/${DB_NAME}
      - REDIS_URL=redis://redis:6379/0
      - HUGGINGFACE_TOKEN=${HUGGINGFACE_TOKEN}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./videos:/app/videos
      - ./models:/app/models
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    deploy:
      resources:
        limits:
          memory: 32G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  celery_worker:
    build: .
    command: celery -A src.backend.celery_tasks worker --loglevel=info --concurrency=1
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres/${DB_NAME}
      - REDIS_URL=redis://redis:6379/0
      - HUGGINGFACE_TOKEN=${HUGGINGFACE_TOKEN}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
    volumes:
      - ./videos:/app/videos
      - ./models:/app/models
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    deploy:
      resources:
        limits:
          memory: 32G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
"""
            
            with open(self.docker_compose_prod, 'w') as f:
                f.write(prod_config)
            
            logger.info("✓ Production docker-compose.yml created")
        
        return True
    
    def run_health_checks(self) -> bool:
        """Run comprehensive health checks"""
        logger.info("Running health checks...")
        
        checks = []
        
        # Check environment file
        if self.env_file.exists():
            checks.append("✓ Environment file exists")
        else:
            checks.append("✗ Environment file missing")
        
        # Check database connection
        try:
            from src.backend.db.database import check_database_connection
            if check_database_connection():
                checks.append("✓ Database connection working")
            else:
                checks.append("✗ Database connection failed")
        except:
            checks.append("✗ Database check failed")
        
        # Check model directory
        models_dir = self.project_dir / "models"
        if models_dir.exists():
            checks.append("✓ Models directory exists")
        else:
            checks.append("✗ Models directory missing")
        
        # Print results
        for check in checks:
            logger.info(check)
        
        # Return True if all checks pass
        return all("✓" in check for check in checks)
    
    def create_systemd_service(self, service_name: str = "cinevivid"):
        """Create systemd service file"""
        logger.info("Creating systemd service...")
        
        service_content = f"""[Unit]
Description=CineVivid AI Video Generation Platform
After=network.target docker.service
Requires=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory={self.project_dir.absolute()}
ExecStart=/usr/bin/docker-compose -f docker-compose.prod.yml up -d
ExecStop=/usr/bin/docker-compose -f docker-compose.prod.yml down
TimeoutStartSec=0

[Install]
WantedBy=multi-user.target
"""
        
        service_file = f"/etc/systemd/system/{service_name}.service"
        
        try:
            with open(service_file, 'w') as f:
                f.write(service_content)
            
            logger.info(f"✓ Systemd service created: {service_file}")
            logger.info("Run the following commands to enable:")
            logger.info(f"sudo systemctl daemon-reload")
            logger.info(f"sudo systemctl enable {service_name}")
            logger.info(f"sudo systemctl start {service_name}")
            
            return True
            
        except PermissionError:
            logger.warning("Permission denied writing systemd service. Run with sudo or create manually.")
            logger.info(f"Service content saved to: {self.project_dir / f'{service_name}.service'}")
            
            # Save to local file instead
            with open(self.project_dir / f"{service_name}.service", 'w') as f:
                f.write(service_content)
            
            return True
        except Exception as e:
            logger.error(f"Failed to create systemd service: {e}")
            return False
    
    def setup_ssl(self, domain: str):
        """Setup SSL certificates using Let's Encrypt"""
        logger.info("Setting up SSL certificates...")
        
        try:
            # Install certbot if not available
            subprocess.run(["which", "certbot"], check=True, capture_output=True)
            
            # Generate certificate
            cmd = [
                "certbot", "certonly",
                "--webroot",
                "-w", str(self.project_dir / "ssl-challenge"),
                "-d", domain,
                "--email", f"admin@{domain}",
                "--agree-tos",
                "--non-interactive"
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            if result.returncode == 0:
                logger.info("✓ SSL certificates generated")
                return True
            else:
                logger.error(f"SSL setup failed: {result.stderr}")
                return False
                
        except subprocess.CalledProcessError:
            logger.warning("Certbot not found. Install with: sudo apt-get install certbot")
            return False
        except Exception as e:
            logger.error(f"SSL setup failed: {e}")
            return False
    
    def create_backup_script(self):
        """Create automated backup script"""
        logger.info("Creating backup script...")
        
        backup_script = """#!/bin/bash
# CineVivid Backup Script

BACKUP_DIR="./backups"
DATE=$(date +%Y%m%d_%H%M%S)

mkdir -p $BACKUP_DIR

# Backup database
docker-compose exec postgres pg_dump -U $DB_USER $DB_NAME > $BACKUP_DIR/db_backup_$DATE.sql

# Backup videos and models (if needed)
tar -czf $BACKUP_DIR/videos_backup_$DATE.tar.gz videos/
tar -czf $BACKUP_DIR/logs_backup_$DATE.tar.gz logs/

# Remove backups older than 30 days
find $BACKUP_DIR -name "*.sql" -mtime +30 -delete
find $BACKUP_DIR -name "*.tar.gz" -mtime +30 -delete

echo "Backup completed: $DATE"
"""
        
        backup_file = self.project_dir / "backup.sh"
        
        try:
            with open(backup_file, 'w') as f:
                f.write(backup_script)
            
            # Make executable
            os.chmod(backup_file, 0o755)
            
            logger.info(f"✓ Backup script created: {backup_file}")
            logger.info("Add to crontab for automated backups:")
            logger.info("0 2 * * * /path/to/cinevivid/backup.sh")
            
            return True
            
        except Exception as e:
            logger.error(f"Failed to create backup script: {e}")
            return False

def main():
    """Main setup function"""
    parser = argparse.ArgumentParser(description="CineVivid Production Setup")
    parser.add_argument("--domain", help="Domain name for SSL setup")
    parser.add_argument("--skip-ssl", action="store_true", help="Skip SSL setup")
    parser.add_argument("--skip-build", action="store_true", help="Skip frontend build")
    parser.add_argument("--config-file", help="JSON configuration file")
    
    args = parser.parse_args()
    
    setup = ProductionSetup()
    
    # Check prerequisites
    if not setup.check_prerequisites():
        logger.error("Prerequisites check failed. Please install missing components.")
        sys.exit(1)
    
    # Load configuration
    config = {}
    if args.config_file:
        try:
            with open(args.config_file, 'r') as f:
                config = json.load(f)
            logger.info(f"Configuration loaded from {args.config_file}")
        except Exception as e:
            logger.error(f"Failed to load configuration: {e}")
            sys.exit(1)
    else:
        # Interactive configuration
        logger.info("Interactive configuration setup...")
        config = {
            "HUGGINGFACE_TOKEN": input("Enter HuggingFace token: "),
            "ELEVENLABS_API_KEY": input("Enter ElevenLabs API key: "),
            "SECRET_KEY": input("Enter secret key (64+ chars): "),
            "DATABASE_URL": input("Enter database URL: "),
            "DOMAIN": args.domain or input("Enter domain name: ")
        }
    
    # Setup environment
    if not setup.setup_environment(config):
        logger.error("Environment setup failed")
        sys.exit(1)
    
    # Setup database
    if not setup.setup_database():
        logger.error("Database setup failed")
        sys.exit(1)
    
    # Build frontend
    if not args.skip_build:
        if not setup.build_frontend():
            logger.error("Frontend build failed")
            sys.exit(1)
    
    # Setup Docker production
    setup.setup_docker_production()
    
    # Setup SSL
    if not args.skip_ssl and args.domain:
        setup.setup_ssl(args.domain)
    
    # Create systemd service
    setup.create_systemd_service()
    
    # Create backup script
    setup.create_backup_script()
    
    # Final health checks
    if setup.run_health_checks():
        logger.info("🎉 Production setup completed successfully!")
        logger.info("Next steps:")
        logger.info("1. Review .env file and update any missing values")
        logger.info("2. Start services: docker-compose -f docker-compose.prod.yml up -d")
        logger.info("3. Check status: docker-compose -f docker-compose.prod.yml ps")
        logger.info("4. View logs: docker-compose -f docker-compose.prod.yml logs -f")
    else:
        logger.error("Setup completed with warnings. Please review and fix issues.")
        sys.exit(1)

if __name__ == "__main__":
    main()